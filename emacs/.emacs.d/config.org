#+title: Emacs configuration file
#+property: header-args:emacs-lisp :tangle yes

* Visual appearence
  Adjust the visual things at the beginning, this prevents ugly
  changes during the startup if other parts need more time to execute.
  This leads to an impression of a fast loading init file.

  Load a color theme:
  #+begin_src emacs-lisp
    (load-theme 'tango-dark-new t)		;don't confirm the load
  #+end_src
  
  Remove the tool bar and the scroll bar, but only in graphical mode.
  In terminal mode this would result in errors or warnings.  In order
  to make this distinction, carry out the customizations when a new
  frame is made and it is graphical.  This also works in servermode if
  it is called as ~emacsclient~, or ~emacsclient -c~.
  #+begin_src emacs-lisp
    (defun new-frame-setup (frame)
      (when (display-graphic-p frame)
	(progn
	  (tool-bar-mode -1)
	  (scroll-bar-mode -1))))
    (add-hook 'after-make-frame-functions 'new-frame-setup)
  #+end_src
  
  Some unnecessary visual parts should always be removed.  Also some
  useful information is added to the mode line.
  #+begin_src emacs-lisp
    (menu-bar-mode -1)
    (blink-cursor-mode -1)
    (column-number-mode)
    (display-time-mode t)
  #+end_src
  
  Remove the start message
  #+begin_src emacs-lisp
    (setq inhibit-startup-screen t)
  #+end_src

* General Settings  
** Emacs Server
  Start emacs server for being able to use emacsclient do not start it
  when already running, this is particularly useful if you edit the
  Emacs configuration and use eval-buffer for testing the effects.
  Note: it is not so easy to check whether the server is running or
  not, it just seems so. You may be surprised by the behaviour!
  #+begin_src emacs-lisp
    (require 'server)
    (unless (server-running-p)
      (server-start))
  #+end_src
  
** Non-Specific Keybindings

  #+begin_src emacs-lisp
    (global-set-key (kbd "C-c r") 'replace-string) ; non-qery replace
						   ; keybinding
    (global-set-key (kbd "C-x C-b") 'ibuffer)      ; better overview of buffers
    (global-set-key (kbd "C-c c") 'comment-or-uncomment-region)
    (global-set-key (kbd "C-c u") 'uncomment-region)

    (global-set-key (kbd "C-c C-f") 'fzf)	      ;fuzzy finder
    (global-set-key (kbd "C-c f") 'fzf-directory) ;
  #+end_src
  
** Markdown
   Do not use pandoc, it has huge dependencies. Cmark is small, fast
   and works well.
   #+begin_src emacs-lisp
     (setq markdown-command "cmark")
   #+end_src

** Org Mode
   #+begin_src emacs-lisp
     (require 'org)
     (global-set-key (kbd "C-c l") 'org-store-link)
     (global-set-key (kbd "C-c a") 'org-agenda)
     ;;(global-set-key (kbd "C-c c") 'org-capture)
     (global-set-key (kbd "C-c b") 'org-switchb)
   #+end_src

   Fix some keybindings for Org mode, my Lenovo Notebook does not like
   shift with other modifiers.
   #+begin_src emacs-lisp
     (define-key org-mode-map (kbd "<C-M-return>") 'org-insert-todo-heading)
     (define-key org-mode-map (kbd "<C-M-left>") 'org-table-delete-column)
     (define-key org-mode-map (kbd "<C-M-right>") 'org-table-insert-column)
     (define-key org-mode-map (kbd "<C-M-up>") 'org-table-kill-row)
     (define-key org-mode-map (kbd "<C-M-down>") 'org-table-insert-row)
   #+end_src
   
   Add better support for interleave mode. This mode is very useful
   for making annotations and notes for pdf files.
   #+begin_src emacs-lisp
     (define-key org-mode-map (kbd "C-c i") 'interleave-mode)
   #+end_src

** PDF-Tools
   This is a better replacement for Doc-View Mode.
   #+begin_src emacs-lisp
     (pdf-tools-install)
   #+end_src

** Multiple Cursors
   Having more than one cursor at the same time can be very handy for
   editing similar places of the document at once.
   #+begin_src emacs-lisp
     (require 'multiple-cursors)
     (global-set-key (kbd "C-s-s C-s-s") 'mc/edit-lines)
     (global-set-key (kbd "M-s-n") 'mc/mark-next-like-this)
     (global-set-key (kbd "M-s-p") 'mc/mark-previous-like-this)
     (global-set-key (kbd "C-c s-n") 'mc/mark-all-like-this)
   #+end_src

** Miscellaneous
   Avoid long confirmations
   #+begin_src emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src

   UTF-8 encoding
   #+begin_src emacs-lisp
    (set-language-environment "UTF-8")
    (set-default-coding-systems 'utf-8)
   #+end_src
   
   Do not ask to save when compiling, just do it
   #+begin_src emacs-lisp
     (setq compilation-ask-about-save nil)
   #+end_src
   
* Font
  Use Fira Code font.  This font has ligatures built-in that are
  desigend for code development.  This is a very excellent font for
  coding, and as a general mono spaced font.  It builds on Fira Mono.

  Using this font is not as easy as it sounds.  Emacs does not offer
  full suport for the ligatures, but with font lock there is a
  workaraound.
  
  Use the X Logical Font Description for setting the font.  This is
  not very easy, but here it does the job (with many default values).
  Its size is 10.5pt.
  #+begin_src emacs-lisp
    (add-to-list 'default-frame-alist 
                 '(font . "-*-Fira Code-*-*-*-*-*-105-*-*-*-*-*-*"))
  #+end_src

  Make a big list for the ligatures.  The ligatures are emulated with
  another font, Fira Code Symbol, and the font lock mode of emacs is
  used for substitutions.
  #+begin_src emacs-lisp
  (add-hook 'after-make-frame-functions
	(lambda (frame)
	  (set-fontset-font t '(#Xe100 . #Xe16f) (font-spec :font "Fira Code Symbol"
							    :height 105))))
							    
  (defconst fira-code-font-lock-keywords-alist
    (mapcar (lambda (regex-char-pair)
              `(,(car regex-char-pair)
                (0 (prog1 ()
                     (compose-region (match-beginning 1)
                                     (match-end 1)
                                     ;; The first argument to concat is a string containing a literal tab
                                     ,(concat "	" (list (decode-char 'ucs (cadr regex-char-pair)))))))))
            '(("\\(www\\)"                   #Xe100)
              ("[^/]\\(\\*\\*\\)[^/]"        #Xe101)
              ("\\(\\*\\*\\*\\)"             #Xe102)
              ("\\(\\*\\*/\\)"               #Xe103)
              ("\\(\\*>\\)"                  #Xe104)
              ("[^*]\\(\\*/\\)"              #Xe105)
              ("\\(\\\\\\\\\\)"              #Xe106)
              ("\\(\\\\\\\\\\\\\\)"          #Xe107)
              ("\\({-\\)"                    #Xe108)
              ("\\(\\[\\]\\)"                #Xe109)
              ("\\(::\\)"                    #Xe10a)
              ("\\(:::\\)"                   #Xe10b)
              ("[^=]\\(:=\\)"                #Xe10c)
              ("\\(!!\\)"                    #Xe10d)
              ("\\(!=\\)"                    #Xe10e)
              ("\\(!==\\)"                   #Xe10f)
              ("\\(-}\\)"                    #Xe110)
              ("\\(--\\)"                    #Xe111)
              ("\\(---\\)"                   #Xe112)
              ("\\(-->\\)"                   #Xe113)
              ("[^-]\\(->\\)"                #Xe114)
              ("\\(->>\\)"                   #Xe115)
              ("\\(-<\\)"                    #Xe116)
              ("\\(-<<\\)"                   #Xe117)
              ("\\(-~\\)"                    #Xe118)
              ("\\(#{\\)"                    #Xe119)
              ("\\(#\\[\\)"                  #Xe11a)
              ("\\(##\\)"                    #Xe11b)
              ("\\(###\\)"                   #Xe11c)
              ("\\(####\\)"                  #Xe11d)
              ("\\(#(\\)"                    #Xe11e)
              ("\\(#\\?\\)"                  #Xe11f)
              ("\\(#_\\)"                    #Xe120)
              ("\\(#_(\\)"                   #Xe121)
              ("\\(\\.-\\)"                  #Xe122)
              ("\\(\\.=\\)"                  #Xe123)
              ("\\(\\.\\.\\)"                #Xe124)
              ("\\(\\.\\.<\\)"               #Xe125)
              ("\\(\\.\\.\\.\\)"             #Xe126)
              ("\\(\\?=\\)"                  #Xe127)
              ("\\(\\?\\?\\)"                #Xe128)
              ("\\(;;\\)"                    #Xe129)
              ("\\(/\\*\\)"                  #Xe12a)
              ("\\(/\\*\\*\\)"               #Xe12b)
              ("\\(/=\\)"                    #Xe12c)
              ("\\(/==\\)"                   #Xe12d)
              ("\\(/>\\)"                    #Xe12e)
              ("\\(//\\)"                    #Xe12f)
              ("\\(///\\)"                   #Xe130)
              ("\\(&&\\)"                    #Xe131)
              ("\\(||\\)"                    #Xe132)
              ("\\(||=\\)"                   #Xe133)
              ("[^|]\\(|=\\)"                #Xe134)
              ("\\(|>\\)"                    #Xe135)
              ("\\(\\^=\\)"                  #Xe136)
              ("\\(\\$>\\)"                  #Xe137)
              ("\\(\\+\\+\\)"                #Xe138)
              ("\\(\\+\\+\\+\\)"             #Xe139)
              ("\\(\\+>\\)"                  #Xe13a)
              ("\\(=:=\\)"                   #Xe13b)
              ("[^!/]\\(==\\)[^>]"           #Xe13c)
              ("\\(===\\)"                   #Xe13d)
              ("\\(==>\\)"                   #Xe13e)
              ("[^=]\\(=>\\)"                #Xe13f)
              ("\\(=>>\\)"                   #Xe140)
              ("\\(<=\\)"                    #Xe141)
              ("\\(=<<\\)"                   #Xe142)
              ("\\(=/=\\)"                   #Xe143)
              ("\\(>-\\)"                    #Xe144)
              ("\\(>=\\)"                    #Xe145)
              ("\\(>=>\\)"                   #Xe146)
              ("[^-=]\\(>>\\)"               #Xe147)
              ("\\(>>-\\)"                   #Xe148)
              ("\\(>>=\\)"                   #Xe149)
              ("\\(>>>\\)"                   #Xe14a)
              ("\\(<\\*\\)"                  #Xe14b)
              ("\\(<\\*>\\)"                 #Xe14c)
              ("\\(<|\\)"                    #Xe14d)
              ("\\(<|>\\)"                   #Xe14e)
              ("\\(<\\$\\)"                  #Xe14f)
              ("\\(<\\$>\\)"                 #Xe150)
              ("\\(<!--\\)"                  #Xe151)
              ("\\(<-\\)"                    #Xe152)
              ("\\(<--\\)"                   #Xe153)
              ("\\(<->\\)"                   #Xe154)
              ("\\(<\\+\\)"                  #Xe155)
              ("\\(<\\+>\\)"                 #Xe156)
              ("\\(<=\\)"                    #Xe157)
              ("\\(<==\\)"                   #Xe158)
              ("\\(<=>\\)"                   #Xe159)
              ("\\(<=<\\)"                   #Xe15a)
              ("\\(<>\\)"                    #Xe15b)
              ("[^-=]\\(<<\\)"               #Xe15c)
              ("\\(<<-\\)"                   #Xe15d)
              ("\\(<<=\\)"                   #Xe15e)
              ("\\(<<<\\)"                   #Xe15f)
              ("\\(<~\\)"                    #Xe160)
              ("\\(<~~\\)"                   #Xe161)
              ("\\(</\\)"                    #Xe162)
              ("\\(</>\\)"                   #Xe163)
              ("\\(~@\\)"                    #Xe164)
              ("\\(~-\\)"                    #Xe165)
              ("\\(~=\\)"                    #Xe166)
              ("\\(~>\\)"                    #Xe167)
              ("[^<]\\(~~\\)"                #Xe168)
              ("\\(~~>\\)"                   #Xe169)
              ("[^%]\\(%%\\)[^%]"            #Xe16a) ;does not work at the
  					;beginning of a line anymore
  	    ;; ("\\(x\\)"                   #Xe16b) This ended up being hard to do properly so i'm leaving it out.
  	    ("0\\(x\\)[0-9]"               #Xe16b) ; not exactly what we
  					; want but a cheap replacement
  					; for main feature
              ("[^:=]\\(:\\)[^:=]"           #Xe16c)
              ("[^\\+<>]\\(\\+\\)[^\\+<>]"   #Xe16d)
              ("[^\\*/<>]\\(\\*\\)[^\\*/<>]" #Xe16f))))

  #+end_src

  Now enable the ligatures.  Do this only for graphical display, as in
  my terminal emulator Fira Code is used as standard font.  Doubling
  the ligatures gives a very poor result.
  #+begin_src emacs-lisp
  (defun add-fira-code-symbol-keywords ()
    (when (display-graphic-p)
      (font-lock-add-keywords nil fira-code-font-lock-keywords-alist)))
  #+end_src
  
  Enable the ligatures for the programming modes.
  #+begin_src emacs-lisp
    (add-hook 'prog-mode-hook
	      #'add-fira-code-symbol-keywords)
  #+end_src
  
* Auto Completion
** Helm
   Helm enables easy completion and selection of items, e.g. when
   coosing files or commands/functions.
   #+begin_src emacs-lisp
     (require 'helm)
     (global-set-key (kbd "M-x") #'helm-M-x)
     (global-set-key (kbd "C-x C-f") #'helm-find-files)
     (helm-mode 1)
   #+end_src

** Use company
  #+begin_src emacs-lisp
    (require 'company)
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-backends (delete 'company-semantic company-backends))
    (setq company-tooltip-align-annotations t)
  #+end_src

  Cycle through possible completions when hitting TAB several times
  #+begin_src emacs-lisp
    (substitute-key-definition 'company-complete-common
    			   'company-complete-common-or-cycle
    			   company-active-map)
    (define-key company-active-map (kbd "ESC") 'company-abort)
  #+end_src

  Make company available in C and C++ mode
  #+begin_src emacs-lisp
    (require 'cc-mode)
    (define-key c-mode-map (kbd "TAB") 'company-indent-or-complete-common)
    (define-key c++-mode-map (kbd "TAB") 'company-indent-or-complete-common)
  #+end_src

* Programming Modes
** Rust
   Add some useful modes, like cargo, racer and eldoc, tho the rust
   mode hook.
   #+begin_src emacs-lisp
     (require 'rust-mode)
     (add-hook 'rust-mode-hook #'cargo-minor-mode)
     (add-hook 'rust-mode-hook 'racer-mode)
     (add-hook 'racer-mode-hook #'eldoc-mode)
     (add-hook 'racer-mode-hook #'company-mode) ;make sure it is started
     (setq rust-format-on-save t)
   #+end_src

   Now define some keybindings. After the other hooks, they should not
   be overwritten by something else.
   #+begin_src emacs-lisp
     (add-hook 'racer-mode-hook
	       (lambda () 
		 (progn
		   (define-key racer-mode-map (kbd "M-.")
		     'racer-find-definition-other-window)
		   (define-key racer-mode-map (kbd "C-x 4 .")
		     'racer-find-definition)
		   ;; this may also be useful for other modes
		   (setq compilation-auto-jump-to-first-error t))))
   #+end_src

   Improve cargo mode with a command for running the release binary
   #+begin_src emacs-lisp
     (add-hook 'cargo-minor-mode-hook
	       (lambda ()
		 (progn
		   (defvar cargo-process--command-run-release "run --release")
		   (defun cargo-process-run-release ()
		     (interactive)
		     (cargo-process--start "Run" cargo-process--command-run-release))
		   (define-key cargo-minor-mode-map (kbd "C-c C-c C-SPC")
		     'cargo-process-run-release))))
   #+end_src
   
** SLIME
   Set the lisp system
   #+begin_src emacs-lisp
     (setq inferior-lisp-program "/usr/bin/sbcl")
     (setq slime-contribs '(slime-fancy))
   #+end_src

** Semantic Mode
   #+begin_src emacs-lisp
     (global-ede-mode t)                      ; Enable the Project management system
     (add-to-list 'semantic-default-submodes 'global-semanticdb-minor-mode)
     (add-to-list 'semantic-default-submodes 'global-semantic-highlight-func-mode)
     (add-to-list 'semantic-default-submodes 'global-semantic-decoration-mode)
     (add-to-list 'semantic-default-submodes 'global-semantic-idle-local-symbol-highlight-mode)
     (add-to-list 'semantic-default-submodes 'global-semantic-idle-scheduler-mode)
     (add-to-list 'semantic-default-submodes 'global-semantic-idle-completions-mode)
     (add-to-list 'semantic-default-submodes 'global-semantic-idle-summary-mode)
   
     (require 'semantic/bovine/gcc)
     (semantic-mode 1)
   #+end_src

** Python
   Use iPython for more comfort
   #+begin_src emacs-lisp
   (require 'python)
   (setq python-shell-interpreter "ipython"
         python-shell-interpreter-args "--simple-prompt -i")
   #+end_src

   Jedi as backend for company
   #+begin_src emacs-lisp
     (add-hook 'python-mode-hook
	       (lambda ()
	         (add-to-list 'company-backends 'company-jedi)))
     (setq jedi:environment-root "jedi")  ; or any other name you like
     (setq py-python-command "/usr/bin/python3")
     (define-key python-mode-map (kbd "TAB") 'company-indent-or-complete-common)
   #+end_src

** Code folding
   Emacs comes with a minor mode for code folding,
   hide-show-mode. Hideshow-org mode uses this mode for code folding
   by just hitting the TAB key.
   #+begin_src emacs-lisp
     (require 'hideshow-org)
     (add-hook 'prog-mode-hook
	       #'hs-org/minor-mode)
   #+end_src

** Fortran
   Use Fortran mode also for pfUnit (.pf) files, this is a unit test
   framework.
   #+begin_src emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.pf\\'" . fortran-mode))
   #+end_src
